<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript基础</title>
    <url>/2021/05/15/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1jE411T7ya?from=search&amp;seid=609703055903100372">学习视频链接</a></p>
<ol>
<li>
<p>let const区别<br>
let值可变，不需要初始化，没有初始化时候默认undefined,const则相反<br>
开发中一般都使用const,除非明确知道值会改变的才用let</p>
</li>
<li>
<p>基本数据类型<br>
String, Number, Boolean, null, undefined, symbol, bigint (后两个ES6新增)</p>
</li>
<li>
<p>const Arrays<br>
使用const操控数组的时候可以直接在末尾通过下标增加元素，但是初始化的时候不能[]这样<br>
不知道有多少值得时候可以用push往末尾加，unshift往开头加</p>
</li>
<li>
<p>对象语法–键值对<br>
跟Java一样A.B<br>
结构赋值（ES6新增）<br>
<img src="https://img-blog.csdnimg.cn/20210515203036570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpamllbGluZzEyMw==,size_16,color_FFFFFF,t_70" alt="JS对象"></p>
</li>
<li>
<p>数组对象<br>
和JSON数据的区别是：JSON的key用双引号,JSON数据发送服务器<br>
<img src="https://img-blog.csdnimg.cn/2021051522104884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpamllbGluZzEyMw==,size_16,color_FFFFFF,t_70" alt="数组对象"></p>
</li>
<li>
<p>循环<br>
普通的for<br>
特别遍历循环遍历高阶数组的：forEach, map, filter</p>
</li>
<li>
<p>条件<br>
== 和 ====的区别：===还会比较数据类型，==只比较值</p>
</li>
<li>
<p>函数<br>
箭头函数更精简<br>
语法：【函数的参数=&gt;函数体】,不需要写function</p>
</li>
<li>
<p>面向对象编程<br>
当创建构造函数的时候，首字母要大写<br>
给原型添加方法，不在对象那里写，这样控制台就不会看到这个函数，这个函数会出现在_proto_这里</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person.prototype.getFullName=function()&#123;</span><br><span class="line">    return &#x27;$&#123;this.firstname&#125; $&#123;this.lastname&#125;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ES6新增了类，让有编程背景的人更好上手，而不使用原型</p>
<ol start="10">
<li>DOM<br>
DOM是文档对象模型的缩写</li>
</ol>
<ul>
<li>一切皆是window对象</li>
<li>如何从DOM选择元素<br>
记录常用的，那种getElementById等就不记录了<br>
单元素：document.querySelector()<br>
多元素：document.querySelectorAll()</li>
<li>操控和修改DOM</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis缓存</title>
    <url>/2021/05/11/MyBatis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h3 id="一、缓存">一、缓存</h3>
<ol>
<li>
<p>为什么使用缓存<br>
减少和数据库交互的次数，提高系统效率</p>
</li>
<li>
<p>什么情况下使用缓存<br>
经常查询，但是不经常改变的数据</p>
</li>
</ol>
<h3 id="二、MyBatis缓存">二、MyBatis缓存</h3>
<p>MyBatis默认定义了一级缓存和二级缓存</p>
<ol>
<li>
<p>一级缓存<br>
一级缓存也称为本地缓存，与数据库<strong>同一会话期间</strong>查询到的数据会放在本地缓存中</p>
</li>
<li>
<p>二级缓存<br>
二级缓存也称为全局缓存，一级缓存作用域低；二级缓存是基于namaspace级别的缓存，一个名称空间对应一个二级缓存</p>
</li>
</ol>
<p>二级缓存的工作机制：</p>
<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li><strong>如果当前会话关闭了，这个会话对应的一级缓存就没了</strong>，所以在会话关闭的时候，将一级缓存的数据存到二级缓存</li>
<li>新的会话查询数据时，就可以从二级缓存中获取内容</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue(一)</title>
    <url>/2021/05/12/Vue(%E4%B8%80)/</url>
    <content><![CDATA[<p>Vue遵循SoC关注度分离原则</p>
<h3 id="前端基础">前端基础</h3>
<p>结构层：HTML</p>
<p>表现层：CSS</p>
<p>–CSS预处理器：用一种专门的语言，进行Web样面设计，再通过编译器转化为正常的CSS</p>
<p>常用的：SASS(基于Ruby), LESS(这个是基于NodeJS,使用简单，一般用这个)</p>
<p>行为层：JS</p>
<h3 id="Vue概念">Vue概念</h3>
<p>Augular特点：将后台的MVC模式搬到前端并增加了模块化开发的理念（MVVM）(VM双向绑定相当于控制层)</p>
<p>React特点： 提出新概念虚拟DOM, 用于减少真实的DOM操作，在内存中模拟DOM操作，提升前端的渲染效率</p>
<p>Vue：渐进性JS框架，渐进性的意思是逐步学习ES6等的新特性。特点：综合了Augular和React的优点（计算属性是它的特色）</p>
<blockquote>
<p>计算属性就是当其依赖属性的值发生变化时,这个属性的值会自动更新,与之相关的DOM部分也会同步自动更新</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue(二)</title>
    <url>/2021/05/16/Vue(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="v-model">v-model</h3>
<p>v-model会忽略表单元素的value,checked,selected特性的初始值，将Vue实例的数据作为数据来源。<br>
如果v-model表达式的初始值未能匹配任何选项，选择框元素将被渲染为’未选中’，在IOS中，用户不能选择第一个选项，不会触发change事件，推荐提供一个值为空的禁用选项</p>
<h3 id="计算属性">计算属性</h3>
<p>计算属性的重点突出在属性两个字上，首先它是个属性，其次这个属性有计算能力。也就是说，它是一个能将计算结果缓存起来的属性（将行为转为静态的属性）</p>
<p>计算属性就是为了将不经常变化的计算结果进行缓存，节约系统的开销</p>
<blockquote>
<p>例子：比如method计算当前时间戳的时候，控制台的值会变化<br>
computed计算当前时间戳的时候，控制台的值不变，如果在计算的上面加一句其它操作(如值的变化),这样时间戳也就变了，相当于时间戳都是被缓存起来，有变化的时候才改变缓存的值</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端学习计划</title>
    <url>/2021/05/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h3 id="一、基础">一、基础</h3>
<ol>
<li>
<p>Vue<br>
<a href="https://www.bilibili.com/video/BV18E411a7mC?from=search&amp;seid=14251799674482834709">狂神的视频</a></p>
</li>
<li>
<p>js作用域、数据类型</p>
</li>
<li>
<p>this指向</p>
</li>
<li>
<p>异步</p>
</li>
<li>
<p>待补充</p>
</li>
</ol>
<h3 id="二、进阶">二、进阶</h3>
<ol>
<li>
<p>http、http缓存策略</p>
</li>
<li>
<p>数据请求方式</p>
</li>
<li>
<p>待补充</p>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>前后端分离</title>
    <url>/2021/05/16/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<p>前后端分离解决了一个问题，那就是静态资源(页面)和动态资源(数据接口)的分离，以前的jsp因为是直接把数据嵌入页面的导致页面资源也是动态的，接下来需要引入cdn缓存的概念，涉及的是运维方面的知识，静态资源一旦进入缓存，是可以有效降低服务器的负载的</p>
<blockquote>
<p>cdn缓存是服务器缓存， cdn就是代理<br>
和Http类似，客户端请求数据时，先从本地缓存查找，如果被请求数据没有过期，拿过来用，如果过期，就向CDN边缘节点发起请求。CDN便会检测被请求的数据是否过期，如果没有过期，就返回数据给客户端，如果过期，CDN再向源站发送请求获取新数据。<br>
CDN边缘节点缓存机制，一般都遵守http标准协议，通过http响应头中的Cache-Control和max-age的字段来设置CDN边缘节点的数据缓存时间。</p>
</blockquote>
<p><strong>前后端分离除了技术问题，还有工程考量的问题</strong><br>
1.前后端分离是为了使项目前端在后续保证迭代和效率的手段，为了达到目的需要对前端代码进行封装，复用等措施来实现代码的内聚耦合，于是前端代码出现工程化框架如vue,react。<br>
2.前后端分离需要成本, 完整的前后端分离需要考虑设计，测试，部署需要投入的人力成本和运营成本会更高,不是所有项目都适用前后端分离，依据项目复杂程度和后续迭代计划进行相应的取舍。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer题目列表</title>
    <url>/2021/05/12/%E5%89%91%E6%8C%87Offer%E9%A2%98%E7%9B%AE%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="Week1">Week1</h3>
<ol>
<li>
<p>找出数组中重复的数字</p>
</li>
<li>
<p>不修改数组找出重复的数字</p>
</li>
<li>
<p>二维数组中的查找</p>
</li>
<li>
<p>替换空格</p>
</li>
<li>
<p>从尾到头打印链表</p>
</li>
<li>
<p>二叉树的下一个节点</p>
</li>
<li>
<p>用两个栈实现队列</p>
</li>
<li>
<p>斐波拉契数列</p>
</li>
<li>
<p>旋转数组的最小数字</p>
</li>
<li>
<p>矩阵中的路径</p>
</li>
</ol>
<h3 id="Week2">Week2</h3>
<p>…</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>图的最小生成树与最短路径</title>
    <url>/2021/05/11/%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B8%8E%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>两者没有太大的关联，只不过在一定程度上应用了贪心算法的思想而已，但区别比较明显。</p>
<h3 id="一、区别">一、区别</h3>
<p>最小生成树能够保证首先是树（对于n个顶点的图只有n-1条边），其次保证任意两个顶点之间都可达，再次保证这棵树的边权值之和为最小，但不能保证任意两点之间是最短路径。</p>
<p>最短路径保证从源点S到目地点D的路径最小（有向图中不要求终点能到起点），不保证任意两个顶点都可达</p>
<h3 id="二、最小生成树">二、最小生成树</h3>
<ol>
<li>
<p>普里姆（Prim）算法<br>
Prim算法是以某顶点为起点，<strong>逐步</strong>找各顶点上最小权值的边来构建最小生成树的<br>
算法描述：<br>
从单一顶点开始，普里姆算法按照以下步骤逐步扩大树中所含顶点的数目，直到遍及连通图的所有顶点。<br>
（1）输入：一个加权连通图，其中顶点集合为V，边集合为E；<br>
（2）初始化：Vnew = {x}，其中x为集合V中的任一节点（起始点），Enew = {}；<br>
（3）重复下列操作，直到Vnew = V：<br>
在集合E中选取权值最小的边（u, v），其中u为集合Vnew中的元素，而v则不是（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；<br>
将v加入集合Vnew中，将（u, v）加入集合Enew中；<br>
（4）输出：使用集合Vnew和Enew来描述所得到的最小生成树。</p>
</li>
<li>
<p>克鲁斯卡尔（Kruskal）算法<br>
将连通网中的所有边按照权值大小进行升序排序，从小到大依次选择。</p>
</li>
</ol>
<p>由于最小生成树本身是一棵生成树，所以需要时刻满足以下两点：<br>
（1）生成树中任意顶点之间有且仅有一条通路，也就是说，生成树中不能存在回路；<br>
（2）对于具有 n 个顶点的连通网，其生成树中只能有 n-1 条边，这 n-1 条边连通着 n 个顶点。<br>
<a href="http://data.biancheng.net/view/41.html">参考链接</a></p>
<h3 id="二、最短路径">二、最短路径</h3>
<p>迪杰斯特拉（Dijkstra）算法<br>
1.算法思想<br>
令G = （V，E）为一个带权有向图，把图中的顶点集合V分成两组，第一组为已求出最短路径的顶点集合S（初始时S中只有源节点，以后每求得一条最短路径，就将它对应的顶点加入到集合S中，直到全部顶点都加入到S中）；第二组是未确定最短路径的顶点集合U。在加入过程中，总保持从源节点v到S中各顶点的最短路径长度不大于从源节点v到U中任何顶点的最短路径长度。<br>
2.算法步骤<br>
（1）初始化时，S只含有源节点；<br>
（2）从U中选取一个距离v最小的顶点k加入S中（该选定的距离就是v到k的最短路径长度）；<br>
（3）以k为新考虑的中间点，修改U中各顶点的距离；<strong>若从源节点v到顶点u的距离（经过顶点k）比原来距离（不经过顶点k）短，则修改顶点u的距离值，修改后的距离值是顶点k的距离加上k到u的距离</strong>；<br>
（4）重复步骤（2）和（3），直到所有顶点都包含在S中。</p>
<p><strong>注：迪杰斯特拉（Dijkstra）算法和普里姆（Prim）算法找下一点的区别是迪杰斯特拉就算加入下一点也一直是找离源点最近的，而普里姆加入下一点之后是找离已加入的这块区域中某个点最近的，可参考<a href="https://blog.csdn.net/spaceyqy/article/details/39024675">示例</a></strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
